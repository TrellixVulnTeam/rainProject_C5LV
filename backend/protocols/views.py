# from .models import SpineProtocolForm, NeuroProtocolForm, MSKProtocolForm, AbdomenProtocolForm
# from backend.keywords.models import NeuroKeywords, MSKKeywords, SpineKeywords, AbdomenKeywords
# from django.shortcuts import render
# from rest_framework import viewsets
# from rest_framework import permissions
# from .serializers import SpineSerializer, NeuroSerializer, MSKSerializer, AbdomenSerializer
# from django.db.models import CharField
# from django.db.models import IntegerField
# from django.core.exceptions import FieldDoesNotExist

#-----import pymongo

#View class for the SpineProtocolForm model.
# from ..formSubmission.models import ScheduleProtocol


# class SpineViewSet(viewsets.ModelViewSet):
#     """
#     API endpoint that allows SpineProtocolForm to be viewed or edited.
#     """
#     queryset = SpineProtocolForm.objects.all()
#     serializer_class = SpineSerializer
#     permission_classes = [permissions.IsAuthenticated]

#View class for the NeuroProtocolForm model.
# class NeuroViewSet(viewsets.ModelViewSet):
#     """
#     API endpoint that allows NeuroProtocolForm to be viewed or edited.
#     """
#     queryset = NeuroProtocolForm.objects.all()
#     serializer_class = NeuroSerializer
#     permission_classes = [permissions.IsAuthenticated]

    ###################################################################################
    #Running query tests and manipulating the database. this would be good to look over so you know how to interact with the database.
    # queryset2 = NeuroKeywords.objects.all()
    # queryset3 = ScheduleProtocol.objects.all()
    # test = NeuroProtocolForm.objects.filter(ProtocolName = "Routine Brain")
    # test2 = NeuroProtocolForm.objects.filter(ProtocolName__startswith="R")
    # test3 = NeuroProtocolForm.objects.filter(ProtocolId = 3)
    # test4 = NeuroProtocolForm.objects.filter(ProtocolId = 9)
    # test5 = NeuroProtocolForm.objects.filter(ProtocolId = 900)

    #-----yclient = pymongo.MongoClient("mongodb://localhost:27017/")
    #-----mydb = myclient["rainDB"]
    #-----mycol = mydb["keywords_spinekeywords"]

    #------mydoc = mycol.find().sort("Points", 1)

    #-----print(mydoc)

    #-----for x in mydoc:
    #-----    print(x)

    #-----mydoc = mycol.find().sort("name", -1)

    
    #queryset3.delete()

    ###################################################################################
    #This is how you see if a queryset is empty
    #try:
    #    test4[0]
    #except IndexError:
    #   print("success")
    ###################################################################################
    #database manipulation.
    #e.ProtocolId = 900
    #e.save()

    #updating a item in the database.
    #for e in queryset:
        #e.ProtocolId = 800
        #e.ProtocolName = "test"
        #e.Sequences = "['sag', 'hgf']"
        #e.ExamCode = "['bic', 'boi']"
        #e.ExamTime = 200
        #e.save()
    ###################################################################################
    #pulls from a different app's model. note you have to import the model using: from backend.keywords.models import NeuroKeywords.
    #queryset2 = NeuroKeywords.objects.all()
    #prints the result
    #for e in queryset2:
        #print(e.Keywords)
    ###################################################################################
    #Query specific index inside nested document. note 0 is the index number of the array.
        #for e in queryset2:
        #print(e.Keywords["Headache"]["Protocols"][0])
    ###################################################################################
    #To delete a document query the item such as test5 = NeuroProtocolForm.objects.filter(ProtocolId = 900) then use the delete method.
    #test5.delete()
    ###################################################################################
    #prints the amount of returned documents. use this for validation to ensure only one document is pulled before you delete/update/whatever.
    #print(test5.count())
    ###################################################################################
    #use this block of code to readd the data to the database.
    #I used it get the id values autogenerated in the database but I had to manually delete the first copy without the id values.
    #for e in queryset:
        #e.ProtocolId = e.ProtocolId
        #e.ProtocolName = e.ProtocolName
        #e.Sequences = e.Sequences
        #e.ExamCode = e.ExamCode
        #e.ExamTime = e.ExamTime
        #e.save()
    ###################################################################################
    #prints variables for testing
    #for e in test3:
        #print("ProtocolId: " + str(e.ProtocolId))
        #print("ProtocolName: " +str(e.ProtocolName))
        #print("ExamTime: " +str(e.ExamTime))
        #print("Sequences: "+ str(e.Sequences))
        #print("ExamCode: " +str(e.ExamCode))
        #print("")
    ###################################################################################
    #Add new item to the database.
    #test = NeuroProtocolForm(ProtocolId=900, ProtocolName="test", ExamTime=200, Sequences= "test", ExamCode="test")
    #test.save()

#View class for the MSKProtocolForm model.
# class MSKViewSet(viewsets.ModelViewSet):
#     """
#     API endpoint that allows MSKProtocolForm to be viewed or edited.
#     """
#     queryset = MSKProtocolForm.objects.all()
#     serializer_class = SpineSerializer
#     permission_classes = [permissions.IsAuthenticated]

# #View class for the AbdomenProtocolForm model.
# class AbdomenViewSet(viewsets.ModelViewSet):
#     """
#     API endpoint that allows AbdomenProtocolForm to be viewed or edited.
#     """
#     queryset = AbdomenProtocolForm.objects.all()
#     serializer_class = SpineSerializer
#     permission_classes = [permissions.IsAuthenticated]

# def post (self, request, format=None):
#     self.http_method_names.append("POST")
#     serializer = UserSerializerWithToken(data=request.data)
#     if serializer.is_valid():
#         serializer.save()
#         return Response(serializer.data, status=status.HTTP_201_CREATED)
#     return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

